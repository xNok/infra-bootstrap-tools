name: "Terraform Plan"

on:
  pull_request:
    paths:
    - '**/*.tf' #trigger when terraform files are changed.

jobs:
  get_directories:
    runs-on: ubuntu-latest
    outputs:
      directories: ${{ steps.changed-files.outputs.all_changed_files  }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v46
      with:
        dir_names: true
        matrix: true
        files: |
          **/*.tf
          *.tf

    - name: List all changed files
      run: echo '${{ steps.changed-files.outputs.all_changed_files }}'

  validate:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    needs: get_directories
    if: ${{ fromJson(needs.get_directories.outputs.directories) != '[]' }}
    strategy:
      matrix:
        workspace: ${{ fromJSON(needs.get_directories.outputs.directories) }}
    permissions:
      # so GitHub can check out this repo using the default github.token
      contents: read
      pull-requests: write
    steps:
    - uses: actions/checkout@v4
    - uses: hashicorp/setup-terraform@v3

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true
      working-directory: ${{ matrix.workspace }}

    - name: Terraform Init
      id: init
      run: terraform init -input=false
      working-directory: ${{ matrix.workspace }}

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      working-directory: ${{ matrix.workspace }}

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -input=false -out=tfplan
      continue-on-error: true
      working-directory: ${{ matrix.workspace }}

    - name: Generate Artifact Name
      id: artifact_name
      run: echo "artifact_name=$(echo ${{ matrix.workspace }} | tr '/' '-')" >> $GITHUB_OUTPUT

    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v4
      with:
        name: tfplan-${{ steps.artifact_name.outputs.artifact_name }}
        path: ${{ matrix.workspace }}/tfplan

    - uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform ${{ matrix.workspace }}')
          })

          // 2. Prepare format of the comment
          const output = `Terraform ${{ matrix.workspace }}}\`
          #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }

  terraform_apply:
    runs-on: ubuntu-latest
    needs: [validate, get_directories]
    environment: terraform
    strategy:
      matrix:
        workspace: ${{ fromJSON(needs.get_directories.outputs.directories) }}
    name: Terraform Apply ${{ matrix.environment }}
    if: ${{ fromJson(needs.get_directories.outputs.directories) != '[]' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ matrix.workspace }}

    - name: Generate Artifact Name
      id: artifact_name
      run: echo "artifact_name=$(echo ${{ matrix.workspace }} | tr '/' '-')" >> $GITHUB_OUTPUT

    - name: Download Plan Artifact
      uses: actions/download-artifact@v4
      with:
        name: tfplan-${{ steps.artifact_name.outputs.artifact_name }}
        path: ${{ matrix.workspace }}

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ matrix.workspace }}

    - name: Terraform Apply
      run: terraform apply tfplan
      working-directory: ${{ matrix.workspace }}
