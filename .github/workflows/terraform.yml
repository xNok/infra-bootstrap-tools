name: "Terraform Plan"

on:
  pull_request:
    paths:
    - '**/*.tf' #trigger when terraform files are changed.

env:
  TF_CLOUD_ORGANIZATION: "YOUR-ORGANIZATION-HERE"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "learn-terraform-github-actions"
  CONFIG_DIRECTORY: "./"

jobs:
  get_directories:
    runs-on: ubuntu-latest
    outputs:
      directories: ${{ steps.list_dirs.outputs.dirs }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: List Terraform directories
      id: list_dirs
      run: |
        dirs=$(find . -maxdepth 1 -type d -name "*" -not -path ".git" -not -path "." | jq -R -s -c '[split("\n")[:-1]]')
        echo "dirs=$dirs" >> $GITHUB_OUTPUT

  terraform:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    needs: get_directories
    strategy:
      matrix:
        environment: ${{ fromJson(needs.get_directories.outputs.directories) }}
    permissions:
      # so GitHub can check out this repo using the default github.token
      contents: read
      pull-requests: write
    steps:
    - uses: actions/checkout@v4
    - uses: hashicorp/setup-terraform@v3

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true
      working-directory: ${{ matrix.environment }}

    - name: Terraform Init
      id: init
      run: terraform init -input=false
      working-directory: ${{ matrix.environment }}

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      working-directory: ${{ matrix.environment }}

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -input=false
      continue-on-error: true
      working-directory: ${{ matrix.environment }}

    - uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })

          // 2. Prepare format of the comment
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }