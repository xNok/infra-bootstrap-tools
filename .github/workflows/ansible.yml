name: Ansible Docker Swarm

on:
  pull_request:
    branches:    
      - main
    types:
      - opened
      - edited
      - ready_for_review
      - synchronize
    paths:
      - .github/workflows/ansible.yml
      - 'ansible/**'
      - requirements.txt

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Trigger on main to clear the lock
  push:
    branches: [ "main" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  validate:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v4

      - name: Run ansible-lint
        uses: ansible/ansible-lint@v25.1.3
        with:
          args: "ansible"

  lock:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      # Lock if this is a PR so two PR cannot deploy at the same time
      - name: PR Lock
        if: github.event_name == 'pull_request'
        uses: ./.github/actions/pr-lock

      - name: Clear PR Lock
        if: github.ref == 'refs/heads/main'
        uses: ./.github/actions/pr-unlock

  run-playbook:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # The validate Job needs to be successful
    needs: [ validate, lock ]
    # The deployment environment thus provides the secrets for that env
    environment: docker_swarm
    if: github.ref != 'refs/heads/main'

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Setup the environment 
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip' # caching pip dependencies

      - name: Install dependencies Including Ansible
        run: |
          ./bin/bash/setup.sh ansible 1password-cli

      - name: write extra inventory to file
        if: ${{ env.INVENTORY != '' }}
        env:
          INVENTORY: ${{ secrets.ANSIBLE_INVENTORY }}
        run: 'echo "$INVENTORY" > inventory/extra'

      - name: run playbook
        run: |
          ansible-playbook -i ansible/playbooks/inventory ansible/playbooks/main.yml
        env:
          BRANCH_NAME: ${{ github.head_ref }}
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
