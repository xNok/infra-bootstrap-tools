- name: Determine affected roles
  hosts: localhost
  gather_facts: false

  roles:
  - utils-affected-roles

# BASE
- name: This is the base requirement for all nodes
  hosts: all
  become: true

  roles:
  - role: docker
    when: "'docker' in hostvars['localhost']['roles_with_changes']"

# SWARM
- name: This setup the Docker Swarm Manager
  hosts: managers
  gather_facts: true
  become: true

  roles:
  # NOTE: One node requires python and extra tools to setup the swarm, I call it the controller.
  # I case we have an issue all master are setup as potential controller
  # this role is for the host running ansible to manage the swarm
  - role: docker-swarm-controller
    when: "'docker-swarm-controller' in hostvars['localhost']['roles_with_changes']"
  # this role is for creating the swarm and adding host as manager
  - role: docker-swarm-manager
    when: "'docker-swarm-manager' in hostvars['localhost']['roles_with_changes']"

- name: This setup nodes to join the Swarm
  hosts: nodes

  roles:
  - role: docker-swarm-node # this role is for host to join the swarm
    when: "'docker-swarm-node' in hostvars['localhost']['roles_with_changes']"

# PLUGINS
- name: This installs docker plugins on all hosts
  hosts: all
  become: true

  roles:
  - role: docker-swarm-plugin-rclone
    when: "'docker-swarm-plugin-rclone' in hostvars['localhost']['roles_with_changes']"

# APPS
- name: This install Caddy and Portainer in the Swarm
  hosts: managers[0] # Only one manager need to be hit
  become: true

  roles:
  - role: docker-swarm-app-caddy
    when: "'docker-swarm-app-caddy' in hostvars['localhost']['roles_with_changes']"
  - role: docker-swarm-app-portainer
    caddy: true
    when: "'docker-swarm-app-portainer' in hostvars['localhost']['roles_with_changes']"
