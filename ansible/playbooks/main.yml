- name: Provision infrastructure and Setup execution local environment
  hosts: localhost
  gather_facts: true

  environment:
    # Used to provision DigitalOcean infrastructure
    TF_VAR_public_key_openssh: "{{ tf_var_public_key_openssh }}"
    DIGITALOCEAN_ACCESS_TOKEN: "{{ tf_digitalocean_access_token }}"
    # Used for terraform backend storage
    AWS_ACCESS_KEY_ID: "{{ tf_aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ tf_aws_secret_access_key }}"

  roles:
  - xnok.infra_bootstrap_tools.utils_ssh_add
  - role: diodonfrost.terraform
    become: true
  - role: xnok.infra_bootstrap_tools.terraform_digitalocean
  - role: xnok.infra_bootstrap_tools.utils_affected_roles

# SWARM Managers
- name: This setup the Docker Swarm Manager
  hosts: managers
  gather_facts: true
  become: true
  vars:
    ansible_ssh_common_args: "-o 'IdentityAgent={{ hostvars['localhost']['utils_ssh_add_ssh_auth_sock'] }}'"
  environment:
    SSH_AGENT_PID: "{{ hostvars['localhost']['utils_ssh_add_ssh_agent_pid'] }}"
    SSH_AUTH_SOCK: "{{ hostvars['localhost']['utils_ssh_add_ssh_auth_sock'] }}"

  roles:
  # NOTE: One node requires python and extra tools to setup the swarm, I call it the controller.
  # I case we have an issue all master are setup as potential controller
  # this role is for the host running ansible to manage the swarm
  - role: xnok.infra_bootstrap_tools.docker_swarm_controller
    when: "'docker_swarm_controller' in hostvars['localhost']['utils_affected_roles_roles_with_changes']"
  # this role is for creating the swarm and adding host as manager
  - role: xnok.infra_bootstrap_tools.docker_swarm_manager
    when: "'docker_swarm_manager' in hostvars['localhost']['utils_affected_roles_roles_with_changes']"

# SWARM Nodes
- name: This setup nodes to join the Swarm
  hosts: nodes
  gather_facts: true
  become: true
  vars:
    ansible_ssh_common_args: "-o 'IdentityAgent={{ hostvars['localhost']['utils_ssh_add_ssh_auth_sock'] }}'"
  environment:
    SSH_AGENT_PID: "{{ hostvars['localhost']['utils_ssh_add_ssh_agent_pid'] }}"
    SSH_AUTH_SOCK: "{{ hostvars['localhost']['utils_ssh_add_ssh_auth_sock'] }}"

  roles:
  - role: xnok.infra_bootstrap_tools.docker_swarm_node # this role is for host to join the swarm
    when: "'docker_swarm_node' in hostvars['localhost']['utils_affected_roles_roles_with_changes']"

# PLUGINS
- name: This installs docker plugins on all hosts
  hosts: all
  become: true

  roles:
  - role: xnok.infra_bootstrap_tools.docker_swarm_plugin_rclone
    when: "'docker_swarm_plugin_rclone' in hostvars['localhost']['utils_affected_roles_roles_with_changes']"

# APPS
- name: This install Caddy and Portainer in the Swarm
  hosts: managers[0] # Only one manager need to be hit
  become: true

  roles:
  - role: xnok.infra_bootstrap_tools.docker_swarm_app_caddy
    when: "'docker_swarm_app_caddy' in hostvars['localhost']['utils_affected_roles_roles_with_changes']"
  - role: xnok.infra_bootstrap_tools.docker_swarm_app_portainer
    docker_swarm_app_portainer_caddy: true
    when: "'docker_swarm_app_portainer' in hostvars['localhost']['utils_affected_roles_roles_with_changes']"
